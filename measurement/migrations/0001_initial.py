# Generated by Django 3.2.18 on 2023-05-01 03:39

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('transductor', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ReferenceMeasurement',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('active_consumption', models.FloatField(blank=True, null=True)),
                ('active_generated', models.FloatField(blank=True, null=True)),
                ('reactive_inductive', models.FloatField(blank=True, null=True)),
                ('reactive_capacitive', models.FloatField(blank=True, null=True)),
                ('slave_collection_date', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('transductor_collection_date', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('data_group', models.IntegerField(choices=[(1, 'minutely'), (2, 'quarterly'), (3, 'monthly'), (4, 'datetime')])),
                ('transductor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='transductor.transductor')),
            ],
            options={
                'verbose_name': 'Reference Measurement',
                'verbose_name_plural': 'Reference Measurements',
            },
        ),
        migrations.CreateModel(
            name='QuarterlyMeasurement',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('active_consumption', models.FloatField(blank=True, null=True)),
                ('active_generated', models.FloatField(blank=True, null=True)),
                ('reactive_inductive', models.FloatField(blank=True, null=True)),
                ('reactive_capacitive', models.FloatField(blank=True, null=True)),
                ('slave_collection_date', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('transductor_collection_date', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('reference_measurement', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='measurement.referencemeasurement')),
                ('transductor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='transductor.transductor')),
            ],
            options={
                'verbose_name': 'Quarterly Measurement',
                'verbose_name_plural': 'Quarterly Measurements',
            },
        ),
        migrations.CreateModel(
            name='MonthlyMeasurement',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('active_consumption', models.FloatField(blank=True, null=True)),
                ('active_generated', models.FloatField(blank=True, null=True)),
                ('reactive_inductive', models.FloatField(blank=True, null=True)),
                ('reactive_capacitive', models.FloatField(blank=True, null=True)),
                ('slave_collection_date', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('transductor_collection_date', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('active_max_power_peak_time', models.FloatField(blank=True, default=None, null=True)),
                ('active_max_power_off_peak_time', models.FloatField(blank=True, default=None, null=True)),
                ('reactive_max_power_peak_time', models.FloatField(blank=True, default=None, null=True)),
                ('reactive_max_power_off_peak_time', models.FloatField(blank=True, default=None, null=True)),
                ('reference_measurement', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='measurement.referencemeasurement')),
                ('transductor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='transductor.transductor')),
            ],
            options={
                'verbose_name': 'Monthly Measurement',
                'verbose_name_plural': 'Monthly Measurements',
            },
        ),
        migrations.CreateModel(
            name='MinutelyMeasurement',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('frequency_a', models.FloatField(blank=True, default=None, null=True)),
                ('frequency_b', models.FloatField(blank=True, default=None, null=True)),
                ('frequency_c', models.FloatField(blank=True, default=None, null=True)),
                ('frequency_iec', models.FloatField(blank=True, default=None, null=True)),
                ('voltage_a', models.FloatField(blank=True, default=None, null=True)),
                ('voltage_b', models.FloatField(blank=True, default=None, null=True)),
                ('voltage_c', models.FloatField(blank=True, default=None, null=True)),
                ('current_a', models.FloatField(blank=True, default=None, null=True)),
                ('current_b', models.FloatField(blank=True, default=None, null=True)),
                ('current_c', models.FloatField(blank=True, default=None, null=True)),
                ('active_power_a', models.FloatField(blank=True, default=None, null=True)),
                ('active_power_b', models.FloatField(blank=True, default=None, null=True)),
                ('active_power_c', models.FloatField(blank=True, default=None, null=True)),
                ('total_active_power', models.FloatField(blank=True, default=None, null=True)),
                ('reactive_power_a', models.FloatField(blank=True, default=None, null=True)),
                ('reactive_power_b', models.FloatField(blank=True, default=None, null=True)),
                ('reactive_power_c', models.FloatField(blank=True, default=None, null=True)),
                ('total_reactive_power', models.FloatField(blank=True, default=None, null=True)),
                ('apparent_power_a', models.FloatField(blank=True, default=None, null=True)),
                ('apparent_power_b', models.FloatField(blank=True, default=None, null=True)),
                ('apparent_power_c', models.FloatField(blank=True, default=None, null=True)),
                ('total_apparent_power', models.FloatField(blank=True, default=None, null=True)),
                ('power_factor_a', models.FloatField(blank=True, default=None, null=True)),
                ('power_factor_b', models.FloatField(blank=True, default=None, null=True)),
                ('power_factor_c', models.FloatField(blank=True, default=None, null=True)),
                ('total_power_factor', models.FloatField(blank=True, default=None, null=True)),
                ('dht_voltage_a', models.FloatField(blank=True, default=None, null=True)),
                ('dht_voltage_b', models.FloatField(blank=True, default=None, null=True)),
                ('dht_voltage_c', models.FloatField(blank=True, default=None, null=True)),
                ('dht_current_a', models.FloatField(blank=True, default=None, null=True)),
                ('dht_current_b', models.FloatField(blank=True, default=None, null=True)),
                ('dht_current_c', models.FloatField(blank=True, default=None, null=True)),
                ('slave_collection_date', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('transductor_collection_date', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('transductor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='minutelys', to='transductor.transductor')),
            ],
            options={
                'verbose_name': 'Minutely Measurement',
                'verbose_name_plural': 'Minutely Measurements',
            },
        ),
        migrations.AddConstraint(
            model_name='referencemeasurement',
            constraint=models.UniqueConstraint(fields=('transductor', 'data_group'), name='unique_ref'),
        ),
    ]
